第6章 接口与内部类
▲ 接口 
▲ 对象克隆 
▲ 接口与回调
▲ 内部类
▲ 代理

6.1 接口
接口中的所有方法自动地属于public。
demo: EmployeeSortTest.java
HZ: 数组排序
	基本数据排序直接排序即可，
	对象排序要实现comparable接口，并覆写compareTo方法

6.1.1 接口的特性
接口不是类，尤其不能使用 new运算符实例化一个接口：
然而，尽管不能构造接口的对象，却能声明接口的变量：
接口变量必须引用实现了接口的类对象：
接下来，如同使用 instanceof检查一个对象是否属于某个特定类一样，也可以使用 instance
检查一个对象是否实现了某个特定的接口：

6.1.2 接口与抽象类
使用抽象类表示通用属性存在这样一个问题：每个类只能扩展于一个类。
而每个类都可以实现多个接口。
demo: EmployeeSortTest.java

6.2 对象克隆
参考：图6-2 浅拷贝
demo: CloneTest.java

HZ: 重写后的方法不能比重写前的方法具有更严格的访问权限：
	在父类中是public的方法，如果子类中将其降低访问权限为private，那么子类中重写
	以后的方法对于外部对象就不可访问了，这个就破坏了继承的含义。

注释：将在卷 II第1章中介绍另一种克隆对象的机制，其中使用了 Java的序列化功能。这
种机制很容易实现并且也很安全，但效率较低。

6.3 接口与回调
demo: TimerTest.java

6.4 内部类
内部类（ inner class）是定义在另一个类中的类。为什么需要使用内部类呢？其主要原因
有以下三点：
• 内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。
• 内部类可以对同一个包中的其他类隐藏起来。
• 当想要定义一个回调函数且不想编写大量代码时，使用 匿名 （ anonymous）内部类比较
便捷。

6.4.1 使用内部类访问对象状态
Demo: book01.chapter06.InnerClassTest.InnerClassTest.java

6.4.2 内部类的特殊语法规则
详见6.4.1的Demo

6.4.3 内部类是否有用、必要和安全

6.4.4 局部内部类
Demo:book01.chapter06.LocalInnerClassTest.LocalInnerClassTest.java

6.4.5 由外部防范访问final变量

6.4.6 匿名内部类
Demo:book01.chapter06.AnonymousInnerClassTest.AnonymousInnerClassTest.java

6.4.7 静态内部类

6.5 代理
P234页，需要重新去看！！！！
Demo: book01.chapter06.ProxyTest.ProxyTest.java






































































