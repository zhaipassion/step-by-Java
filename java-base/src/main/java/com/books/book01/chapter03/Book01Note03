主要内容：
▲ 一个简单的Java应用程序 
▲ 字符串
▲ 注释 
▲ 输入输出
▲ 数据类型 
▲ 控制流程
▲ 变量 
▲ 大数值
▲ 运算符 
▲ 数组
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

▲ 3.1 一个简单的Java程序
永恒的hello world~

▲ 3.2 注释
//
/* */

▲ 3.3 数据类型
8种基本数据类型：
4种整型：byte、short、int、long，分别是 1字节、2字节、4字节、8字节
2种浮点类型：float、double，分别是 4字节、8字节
1种表示Unicode编码的字符单元的字符类型：char
1种表示真值的类型：boolean

●3.3.1 整型
参考【表3.1 Java整型.jpg】
在通常情况下， int类型最常用。但如果表示星球上的居住人数，就需要使用 long类型了。
byte和short类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用存
储空间量的大数组。

●3.3.2 浮点类型
参考【表3.2 浮点类型.jpg】
double表示这种类型的数值精度是float类型的两倍（有人称之为双精度数值）。绝大部分
应用程序都采用 double类型。在很多情况下， float类型的精度很难满足需求。例如，
用 7位有效数字足以精确地表示普通雇员的年薪，但表示公司总裁的年薪可能就不够用了。
实际上，只有很少的情况适合使用 float类型，例如，需要快速地处理单精度数据，或者
需要存储大量数据。
float类型的数值有一个后缀F（例如， 3.402F）。没有后缀F的浮点数值（如3.402）
默认为double类型。当然，也可以在浮点数值后面添加后缀D（例如， 3.402D）。

●3.3.3 char类型（HZ：太长了，没看懂。。。）
要想弄清char类型，就必须了解Unicode编码表。 Unicode打破了传统字符编码方法的限制。
在Unicode出现之前，已经有许多种不同的标准：美国的 ASCII、西欧语言中的 ISO 8859-1 、
俄国的KOI-8、中国的GB118030和BIG-5等等。这样就产生了下面两个问题：一个是对于任意
给定的代码值，在不同的编码方案下有可能对应不同的字母；二是采用大字符集的语言其编
码长度有可能不同。例如，有些常用的字符采用单字节编码，而另一些字符则需要两个或更
多个字节。
设计Unicode编码的目的就是要解决这些问题。在20世纪80年代开始启动设计工作时，人们
认为两个字节的代码宽度足以能够对世界上各种语言的所有字符进行编码，并有足够的空间留
给未来的扩展。在1991年发布了 Unicode 1.0，当时仅占用 65 536个代码值中不到一半的部分。
在设计Java时决定采用 16位的Unicode字符集，这样会比使用 8位字符集的程序设计语言有很大
的改进。
十分遗憾，经过一段时间，不可避免的事情发生了。 Unicode字符超过了 65 536个，其主要
原因是增加了大量的汉语、日语和韩国语言中的表意文字。现在， 16位的char类型已经不能满
足描述所有Unicode字符的需要了。
下面利用一些专用术语解释一下Java语言解决这个问题的基本方法。从JDK 5.0开始。 代码
点（ code point）是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，代码点采
用十六进制书写，并加上前缀U+，例如U+0041就是字母A的代码点。 Unicode的代码点可以分
成17个代码级别（ code plane）。第一个代码级别称为基本的多语言级别（ basic multilingual
plane），代码点从U+0000到U+FFFF，其中包括了经典的Unicode代码；其余的16个附加级别，
代码点从U+10000到U+10FFFF，其中包括了一些辅助字符（ supplementary character）。
UTF-16编码采用不同长度的编码表示所有Unicode代码点。在基本的多语言级别中，每个
字符用 16位表示，通常被称为代码单元（ code unit）；而辅助字符采用一对连续的代码单元进
行编码。这样构成的编码值一定落入基本的多语言级别中空闲的2048字节内，通常被称为替代
区域（ surrogate area）［ U+D800~U+DBFF用于第一个代码单元， U+DC00~U+DFFF用于第二
个代码单元］。这样设计十分巧妙，我们可以从中迅速地知道一个代码单元是一个字符的编码，
还是一个辅助字符的第一或第二部分。例如，对于整数集合的数学符号，它的代码点是
U+1D56B，并且是用两个代码单元U+D835和 U+DD6B编码的（有关编码算法的描述请参看
http://en.wikipe-dia.org/wiki/UTF-16）。
在Java中， char类型用 UTF-16编码描述一个代码单元。
我们强烈建议不要在程序中使用 char类型，除非确实需要对UTF-16代码单元进行操作。最
好将需要处理的字符串用抽象数据类型表示（有关这方面的内容将在稍后讨论）。

▲ 3.4 变量、常量
声明变量
初始化变量

▲ 3.5 运算符
+ - * /
自增运算符、自减运算符
关系运算符、boolen运算符
位运算符：& | ^ -    (分别表示：与、或、异或、非)
类型转换、强制类型转换
括号与运算符级别
枚举类型

参考：【图3.1 数值类型之间的合法转换.jpg】
• 如果两个操作数中有一个是double类型的，另一个操作数就会转换为double类型。
• 否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型。
• 否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型。
• 否则，两个操作数都将被转换为int类型。

▲ 3.6 字符串
字符串：子串、拼接、不可变字符串、字符串比较是否相等
构建字符串：StringBuilder

▲ 3.7 输入输出
3.7.1 读取输入
demo:InputTest.java

3.7.2 格式化输出
参考：
【表3.5 用于printf的转换符.jpg】
【表3.6 用于printf的标志.jpg】

3.7.3 文件输入与输出
File f = new File("d:test.txt")

▲ 3.8 控制流程
●3.8.1 块作用域
块（即复合语句）是指由一对花括号括起来的若干条简单的Java语句。块确定了变量的作
用域。一个块可以嵌套在另一个块中。但是，不能在嵌套的两个块中声明同名的变量。例如，
下面的代码就有错误，而无法通过编译：
{
	int a;
	{
		int a; // 嵌套代码块中不能有相同的变量名
		int b;
	}
}
●3.8.2 条件语句
	if() {
	} else if {
	} else {
	}
●3.8.3 循环
	while(){
	}
或者至少执行一次的时候使用：
	do {
	} while() {
	}
●.8.4 确定循环
	for() {
	}
for循环语句只不过是while循环的一种简化形式。例如，
	for(int i=10;i>0;i--) {
		System.out.println(i);
	}
可以重写为：
	int i=10;
	while(i>0) {
		System.out.println(i);
		i--;
	}
●3.8.5 多重选择：switch 语句
switch(choice) {
	case 1:
		……
		break;
	case 2:
		……
		break;
	……
	default:
		……
		break;
}
●3.8.6 中断控制流程语句
break关键字
continue关键字
Java还提供了一种带标签的break语句，用于跳出多重嵌套的循环语句。
请注意，标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号。
对应的，还有一种带标签的continue语句，将跳到与标签匹配的循环首部。

▲ 3.9 大数值
BigInteger
BigDecimal
不能使用+-*/，而是使用add(),multiply()等方法

▲ 3.10 数组
数组是一种数据结构，用来存储同一类型值的集合。通过一个整型下标可以访问数组中的
每一个值。
●3.10.1 For each循环
	for(int element : a) {
		System.out.println(element);
	}

●3.10.2 数组初始化以及匿名数组
	int[] smallPrimes = {2,3,5,7,11,13};
	new int[] {17,19,23,29,31,37}

●3.10.3 数组拷贝
如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays类的copyOf方法：
int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers,luckyNumbers.length);

●3.10.4 命令行参数
前面已经看到多个使用 Java数组的示例。每一个Java应用程序都有一个带String arg[]参数
的main方法。这个参数表明 main方法将接收一个字符串数组，也就是命令行参数。
比如：java Message -g cruel world
就是运行Message类，并传递给main函数三个参数：-g cruel world
demo：Message.java

●3.10.5 数组排序
要想对数值型数组进行排序，可以使用 Arrays类中的sort方法：
int[] a = new int[100];
……
Arrays.sort(a);
demo：LotteryDrawing.java

●3.10.6 多维数组
demo：CompoundInterest.java

●3.10.7 不规则数组
demo：LotteryArray.java

























