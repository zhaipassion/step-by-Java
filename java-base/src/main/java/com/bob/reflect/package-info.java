/**
 * @Package com.haizhu.reflect_Demo
 * @ClassName: package-info
 * @Description:
 * @author ZhuHongbo
 * @date 2014年1月6日 下午11:30:16
 * <p>
 * 《杜聚宾》
 * java.lang.Class & java.lang.reflect.*
 * 1、反射的基本概念
 * 2、反射的类反射
 * 3、安全性和反射
 * 4、两个缺点
 * <p>
 * 什么是反射：
 * 反射是由Smith在1982年首次提出的，主要指程序可以访问、检测和修改它本身状态或行为的一种能力，
 * 并能根据自身行为的状态和结果，调整或修改应用所妙手行为的状态和相关的 语义。JAVA中，反射能创建
 * 灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码连接。反射允许我们在编写与执行时，
 * 使我们的程序代码能够接入装载到JVM中的类的内部消息，而不是源代码中选定的类协作的代码。但是：
 * 若使用不当，反射的成本很高！
 * <p>
 * 作用：
 * 1、使用反射可以完成反编译
 * 2、通过反射机制访问java对象的属性、方法、构造方法等
 * <p>
 * 缺点：
 * 1、性能有影响
 * 2、不利于代码维护
 */

/**
 * 《杜聚宾》
 * java.lang.Class & java.lang.reflect.*
 * 1、反射的基本概念
 * 2、反射的类反射
 * 3、安全性和反射
 * 4、两个缺点
 *
 * 什么是反射：
 * 反射是由Smith在1982年首次提出的，主要指程序可以访问、检测和修改它本身状态或行为的一种能力，
 * 并能根据自身行为的状态和结果，调整或修改应用所妙手行为的状态和相关的 语义。JAVA中，反射能创建
 * 灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码连接。反射允许我们在编写与执行时，
 * 使我们的程序代码能够接入装载到JVM中的类的内部消息，而不是源代码中选定的类协作的代码。但是：
 * 若使用不当，反射的成本很高！
 *
 * 作用：
 * 1、使用反射可以完成反编译
 * 2、通过反射机制访问java对象的属性、方法、构造方法等
 *
 * 缺点：
 * 1、性能有影响
 * 2、不利于代码维护
 */

package com.bob.reflect;