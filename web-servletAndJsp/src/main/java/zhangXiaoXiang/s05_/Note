# java 虚拟机使用每个类的第一件事情就是将该类的字节码装
	载进来，装载类字节码的功能是由类装载器完成的，类装载器
	负责根据一个类的名称来定位和生成类的字节码数据后返回给
	Java虚拟机。
	
# 类装载器本身也是一个 Java 类，Java 虚拟机也允许开发人员
	编写自己的类装载器，以便通过其他特殊方式来产生类字节码。
	
# 不管类装载器采用什么方式，只要能偶在内存中制造出给 Java
	虚拟机调用类字节码即可，所以，把类装载器描述为类字节码
	的制造器更容易让人理解。

# 当一个类被加载后， Java 虚拟机将其编译为可执行代码存储在
	内存中，并将索引信息存储进一个 HashTable 中，其索引
	关键字为与之相对应的类名。

# Java程序中类本身也是一种食物，它可以用一个Java类描述，
	这个特殊对待类名就是Class。类装载器装载某个类的字节码
	的过程实际上就是在创建Class类的一个实力对象，这个Class
	类的实例对象封装的内容就是当前加载的类的字节码数据。

# Java 类库中提供了一个java.lang.ClassLoader 来
	作为类装载器的基类，Java 虚拟机和程序都调用了ClassLoader
	类的loadClass方法类加载类，ClassLoader是一个
	抽象类，真正的类装载器必须是ClassLoader的子类。
	
# Class 类中定义了一个getClassLoader方法，用于返回它所
	描述的类的类装载器对象，这个返回对象的类型就是ClassLoader。

# 一个类装载器本身也是一个Java类，所以，类装载器自身也需要被
	另外一个类装载器装载。但是，Java虚拟机中内嵌了一个称为
	Bootstrap的类装载器，它属于Java虚拟机的内核，不用
	类装载器装载。Bootstrap类装载器负责加载Java核心包中
	的类（即rt.jar文件中的类），这些类的Class.getClassLoader
	方法返回值为null，即表示是Bootstrap类装载器。

# ExtClassLoader类装载器负责加载存放在%JAVA_HOME%/jre/lib/ext
	目录下的jar包中的类，AppClassLoader负责加载应用程序的启动执行类。
	
	
# 类装载器的委托模式
	省略，具体请再去看第5节的“类装载器的委托模式”

















