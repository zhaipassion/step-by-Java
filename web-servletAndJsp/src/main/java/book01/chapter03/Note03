本章的主题：
servlet的基本结构
生成纯文本的简单servlet
生成HTMML的servlet
servlet 和包
协助构建HTML的一些使用工具类
servlet的生命周期
多线程问题的处理
与servlet进行交互式对话的工具
servlet的调试策略

3.1 servlet的基本结构
********************************************************
servlet 一般扩展HttpServlet，并依数据发送凡是的不同（GET或POST），覆盖
doGet 或 doPost 方法。如果希望servlet 对 GET 和 POST 请求采用同样的行动，
只需要让doGet 调用 doPost，反之依然。
有两个参数：HttpServletRequest，HttpServletResponse。
HttpServletRequest包含请求信息，比如表单数据、HTTP请求报头、客户主机名等
HttpServletResponse可以指定输出信息，比如HTTP状态码、响应报头等。最重要
的是，通过此参数可以获得PrintWriter，用它可以将文档内容发送给客户。

3.2 生成纯文本的servlet
********************************************************

3.3 生成HTML的servlet
********************************************************

3.4 servlet的打包
********************************************************
就是一般说的Java 的 package：package com.haizhu;

3.5 简单的HTML构建工具
********************************************************
就是将重复的HTML代码写成工具类，直接调用，避免代码重复的问题。

3.6 servlet 的生命周期
********************************************************
首次创建servlet时，它的init方法会得到调用，因此，init是放置一次性设置代码的
地方。在这之后针对每个用户请求，都会创建一个线程，该线程调用前面创建的实例的service
方法。多个并发请求一般会导致多个线程同时调用service。之后，由service方法依据
接收到的HTTP请求的类型，调用doGet，doPost，或其他doXxx方法。最后，如果服务
器决定卸载某个service，他会首先调用servlet的destroy方法。
HZ：所以，每个servlet请求都会先调用service方法，而不是调用doGet，doPost方法，
这两个方法其实是service调用的，而不是浏览器发送请求直接请求的。
3.6.1 service方法
如果需要在servlet中等同的处理POST和GET请求，您可能倾向于不去实现doGet和doPost
方法，而是直接覆盖service方法。这不是一个好的思想。取而代之，只需让doPost调用doGet
（或相反）即可。虽然这种方法多出几行代码，但相对于直接覆盖service，他又几项有点：首先，
之后（或在子类中）您还可以加入doPut、doTrace等，支持其他HTTP请求方法。直接覆盖则
排除了这种可能性。其次，您还可以通过添加getLastModified方法，加入对修改日期的支持。
由于getLastModified由默认的service方法调用，所以覆盖service方法也就失去了
这个选项。最后，service提供对HEAD、OPTION和TRACE请求的自动支持。
--------------------------------------------------------
【核心方法】如果您的servlet需要等同的处理GET和POST，可以让doPost方法调用
doGet，或者相反，但不要通过覆盖service方法来实现。
--------------------------------------------------------
3.6.2 doGet、doPost 和 doXxx 方法
这些方法才是servlet的主体。
3.6.3 init方法
大多数时候，您的servlet只需处理单个请求的数据，doGet或doPost是生命周期中唯一
需要的方法。然而，有时候您希望在servlet首次载入是，执行复杂的初始化任务，但并不想
每个请求都重复这些任务。init方法就专为这种情况设计：他在servlet初次创建时被调用，
之后处理的每个用户的请求时，则不再调用这个方法。因此，它主要用于一次性的初始化。
servlet一般用于一次性的初始化，但也可以指定servlet在服务器启动后载入。（参见
本书关于web.xml文件的章节）
demo:http://localhost:8080/servlet_demo/LotteryNumbers
3.6.4 destroy方法
服务器可能会决定移除之前载入的servlet实例，或许因为服务器的管理员要求它这样做，
或许由于服务器长时间空闲。但是，在服务器移除servlet的实例之前，他会调用servlet
的destroy方法，从而使得servlet有机会关闭数据库连接、停止后台运行的线程、将
cookie列表和点击技术写入到磁盘、并执行其他清理活动。但是，要意识到Web服务器有
可能崩溃。因此，不要讲destroy机制作为向磁盘上保存状态的唯一机制。如果服务器执行
注入点击技术，或对cookie值（表示特殊的访问）的列表进行累加等活动，应该主动地定期
将数据写入到磁盘上。

3.7 SingleThreadModel接口
********************************************************
此接口可以防止多线程并发访问，保证各线程的数据正确，但是这并不是最优方案，因为此方法
的代价是将所有的servlet请求进行排队，只有上一个servlet请求完全结束，才会执行
下一个servlet请求。这样，在高并发的时候，会对servlet的访问性能造成极大的损害
（等待时间）。在servlet2.4（JSP2.0）规范中明确地反对使用这种方式。使用明确的
synchronized块要好的多。
demo:http://localhost:8080/servlet_demo/UserIDs

3.8 servlet的调试
********************************************************
各种调试方法，其实自己用IDE（eclipse）直接调试就行了




































































